# Basic
Playground: https://www.typescriptlang.org/play

-> tsc k tham số sẽ complie toàn bộ thư mục gốc file.ts sang file.js, dùng tsconfig.json ở thư mục gốc
tsc <file cụ thể> sẽ complie 1 file và bỏ qua tsconfig.json

-> as any
a ?: string
a! => k thể nào null or undefined để typescript k throw nullability warning
showTopLoading!(); => Silence warning rằng hàm này k thể null or undefined và luôn có thể gọi được.

-> Dùng type khi cần định nghĩa cấu trúc 1 objects
Dùng interface và class khi cần hướng đối tượng implement, extends lẫn nhau.

-> Khi 1 file export bất cứ thứ gì, file khác có thể import với cú pháp của ES6 để dùng.
Nếu không, 1 files có thể dùng trực tiếp file khác mà k cần export khi thêm: /// <reference path="mathUtils.ts" /> => đây là cách cũ, chú ý file gốc phải k có export vì nếu có export nó tự coi là 1 module và buộc phải dùng import của ES6 mới được => nên luôn dùng export import cho dễ hiểu, kể cả file.d.ts

=> Chốt: 1 file.d.ts mà có export thì file khác phải import mới dùng được; file.d.ts mà có export thì file khác phải import mới dùng được; Nếu 1 file.d.ts không có export thì mọi thứ bên trong đều là global mà không cần import cũng dùng được ở file khác, miễn là nó trong phạm vi, không trong phạm vi thì phải thêm vào ts.config.json;

-> Luôn dùng string (kiểu nguyên thuỷ), kbk dùng String (object)

-> enum, namespace

-> ReturnType, typeof, keyof
Pick, Exclude, Awaited
InstanceType
Có thể tạo ra 1 function return các type khác nhau dựa trên input đầu vào mà k dùng any => ref tới "_getCurrentUser của SetupProjectNextJS"

-> type x?: number tương đương x: number | undefined
Vd: muốn dùng a[b].includes() với a là {helmet?: string[], rarity: string[]} thì phải viết type của b là "helmet" | "rarity"

K nên dùng type Function mà dùng rõ ra (_: string) => void 

x là [number], y là string[], dùng x.concat(y) sẽ lỗi, buộc phải dùng const z: (string | number)[] = [...x, ...y];



# File declaration.d.ts
Thêm vào tsconfig.json để nhận diện file chỉ khi k nằm trong thư mục chứa các file ts và k nằm trong thư mục được tsconfig.json quét thì thêm:
{
  "include": ["src", "declaration.d.ts"]
}
Dùng để khai báo biến toàn cục, mở rộng kiểu dữ liệu có sẵn or khai báo kiểu mới, khai báo kiểu cho lib k hỗ trợ typescript để dùng trong typescript

declare dùng để khai báo mà k cung cấp chi tiết implementation, k thể gán =. Thật ra trong file.d.ts cũng chỉ được khai báo, k được có implemtation, k thể gán =. Điểm khác biệt là declare không tạo ra code JavaScript khi biên dịch, tức chỉ cần khai báo dùng trong TS chứ kp code thực tế. 
declare ngoài cùng sẽ toàn cục và dùng mà k cần import. Còn nếu export sẽ tự hiểu là dùng riêng trong các module thì phải import, nó sẽ k còn toàn cục.
=> Chốt: Trong file.d.ts nên luôn dùng declare, khi ra ngoài thì kết hợp export, global thì bỏ export. Vd:
declare const API_URL: string;
declare function fetchData(url: string): Promise<any>;
export { API_URL, fetchData };

VD khi dùng typescript react mà bundler không hỗ trợ file svg. Ta phải có file.d.ts declare module "*.svg" mới chạy được, hoặc tải plugin hỗ trợ.

VD file.d.ts: declare const TEST_CONST: string;
Dùng như này thì khai báo giá trị ở đâu? K thể gán vì nó sẽ tưởng là redeclare lại biến const là lỗi. Thường chỉ dùng v khi có file js có biến sẵn rồi và khai báo type trong typescript để dùng file js trong ts thôi.



# Other
-> erasableSyntaxOnly true là option khiến code strict hơn, để tắt các tính năng:
- enum
- Dùng short:
class JKL {
  constructor(private foo: string) { }
}
Y hệt với:
class JKL {
  private foo: string; 
  constructor(foo: string) {
    this.foo = foo; 
  }
}
- Export function trong namespace:
export namespace OhNo {
    export const LK = () => {};
}


